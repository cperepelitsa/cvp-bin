#!/bin/bash

debug="false"

# dbglog [<msg> ...]
# does nothing if $debug is not "true"
# if there are arguments, writes them to stderr as one line with the prefix "vcut: "
# otherwise, copies lines from stdin to stderr with the prefix "vcut: "
dbglog() {
    [ "${debug}" = "true" ] || return 0
    if [ $# -eq 0 ]; then
        sed 's/^/vcut: /' >&2
    else
        echo "vcut: $@" >&2
    fi
}

# usage: line_pairs
# reads pairs of lines on stdin and outputs pairs delimited by " "
line_pairs() {
    if [ $# -ne 0 ]; then
        echo "vcut: line_pairs: too many arguments ($#); expected 0" >&2
        return 1
    fi

    awk '{ buf=$0; getline; print buf " " $0 }'
}

# usage: ts_to_s <ts>
# <ts> is a timestamp in the form "01:02:03.456"
# outputs <ts> converted to (possibly fractional) seconds
ts_to_s() {
    if [ $# -ne 1 ]; then
        echo "vcut: ts_to_s: wrong number of arguments ($#); expected 1" >&2
        return 1
    fi

    parts=( $(echo "$1" | tr ':' '\n') )
    seconds=0
    for ((i = 0; i < ${#parts[@]}; i++)) {
        seconds=$(dc -e "3k ${seconds} 60 * ${parts[$i]} + p")
    }

    echo "${seconds}"
}

# usage: tdiff <start> <end>
# <start> and <end> are timestamps in the form "01:02:03.456"
# outputs the difference between the two as (possibly fractional) seconds
tdiff() {
    if [ $# -ne 2 ]; then
        echo "vcut: tdiff: wrong number of arguments ($#); expected 2" >&2
        return 1
    fi

    end=$(ts_to_s "$2"); [ $? -eq 0 ] || return 1
    start=$(ts_to_s "$1"); [ $? -eq 0 ] || return 1

    delta=$(dc -e "3k ${end} ${start} - p")
    echo "${delta}"
}

# usage: get_clip_times <video> <screenshot-dir>
# executes mpv, then outputs "<start> <end>" timestamps based on screenshots taken
get_clip_times() {
    if [ $# -ne 2 ]; then
        echo "vcut: get_clip_times: wrong number of arguments ($#); expected 2" >&2
        return 1
    fi

    video="$1"
    ssdir="$2"
    mpv \
        --really-quiet \
        --pause --keep-open --osd-level=3 --osd-fractions \
        --screenshot-directory="${ssdir}" \
        --screenshot-template='%P' \
        "${video}"
    if [ $? -ne 0 ]; then
        echo "vcut: mpv failed" >&2
        return 1
    fi

    num_ss=$(ls "${ssdir}" | wc -l)
    if [ "${num_ss}" -eq 0 ]; then
        echo "vcut: no screenshots taken" >&2
        return 1
    elif [ $(expr "${num_ss}" '%' 2) -eq 1 ]; then
        echo "vcut: odd number of screenshots taken" >&2
        return 1
    fi

    ls "${ssdir}" | sed -n 's/\.jpg$//p' | line_pairs
}

# usage: extract_clip <input> <ts-start> <ts-end> <output>
# runs ffmpeg to extract a clip from <input> and saves as <output>/<output>.<ext>,
# where <ext> is <input>'s file extension;
# also saves ffmpeg's stdout and stderr to <output>/ffmpeg.{out,err};
# if operation succeeds, outputs name of clip
extract_clip() {
    if [ $# -ne 4 ]; then
        echo "vcut: extract_clip: wrong number of arguments ($#); expected 4" >&2
        return 1
    fi

    dstdir="$4"
    mkdir "${dstdir}"

    src="$1"
    dst="${dstdir}/$(basename $4).${src##*.}"
    ts_start="$2"
    ts_delta=$(tdiff "$2" "$3")
    [ $? -eq 0 ] || return 1

    dbglog "extract_clip: ${src}: \"${ts_start}\"-\"$3\" (${ts_delta} s) -> ${dst}"
    ffmpeg \
        -ss "${ts_start}" -t "${ts_delta}" -i "${src}" \
        -codec copy "${dst}" \
        > "${dstdir}/ffmpeg.out" 2> "${dstdir}/ffmpeg.err"
    if [ $? -ne 0 ]; then
        echo "vcut: extract_clip: ffmpeg failed for clip $4:" >&2
        sed 's/^/ffmpeg: /' "${dstdir}/ffmpeg.err" >&2
        return 1
    fi

    echo "${dst}"
}

src=""
dst=""
sourcing="false"
parse_args() {
    while [ $# -gt 0 ]; do
        case "$1" in
            --source) sourcing="true"; return 0 ;;
            --debug) debug="true" ;;
            *)
                if [ -z "${src}" ]; then
                    src="$1"
                elif [ -z "${dst}" ]; then
                    dst="$1"
                else
                    echo "vcut: excess argument \"$1\"" >&2
                    return 1
                fi
                ;;
        esac
        shift
    done
}

main() {
    parse_args "$@"
    [ $? -eq 0 ] || return 1
    [ "${sourcing}" = "true" ] && return 0

    orig_dir="${PWD}"
    tmpdir=$(mktemp --tmpdir=/tmp --directory 'vcut_XXXXXXXX')
    [ $? -eq 0 ] || return 1
    dbglog "scratch dir: ${tmpdir}"

    # run mpv to get timestamps of start/end times for clips
    get_clip_times "${src}" "${tmpdir}/screenshots" > "${tmpdir}/times"
    if [ $? -ne 0 ]; then
        [ "${debug}" = "true" ] || rm -r "${tmpdir}"
        return 1
    fi

    # extract clips
    num_clips=0
    while read -r ts_start ts_end; do
        ((num_clips+=1))
        clip=$(extract_clip "${src}" "${ts_start}" "${ts_end}" "${tmpdir}/${num_clips}")
        if [ $? -ne 0 ]; then
            [ "${debug}" = "true" ] || rm -r "${tmpdir}"
            return 1
        fi
        echo "file '${clip}'" >> "${tmpdir}/clips"
    done < "${tmpdir}/times"

    # concat clips
    dbglog "concatenating ${num_clips} clips into ${dst}"
    ffmpeg \
        -safe 0 -f concat -i "${tmpdir}/clips" -codec copy "${dst}" \
        > "${tmpdir}/concat.out" 2> "${tmpdir}/concat.err"
    if [ $? -ne 0 ]; then
        echo "vcut: ffmpeg concat failed:" >&2
        sed 's/^/ffmpeg: /' "${tmpdir}/concat.err" >&2
        [ "${debug}" = "true" ] || rm -r "${tmpdir}"
        return 1
    fi

    dbglog "done"
    [ "${debug}" = "true" ] || rm -r "${tmpdir}"
}

main "$@"
